# 미리 Node 16.20.1을 설치한다.
# 미리 yarn을 설치한다.
name: CD for frontend

on:
    workflow_dispatch:
    workflow_run:
        workflows: ['CI for frontend']
        types:
            - completed

jobs:
    CD:
        # CI 가 실패해도 completed여서, success 체크를 해줘야 함
        # https://stackoverflow.com/a/64733705
        if: ${{ (github.event.workflow_run.conclusion == 'success') || (github.event_name == 'workflow_dispatch') }}
        runs-on: ubuntu-22.04

        strategy:
            matrix:
                node-version: [16.x]

        steps:
            - name: Node.js 배포
              uses: appleboy/ssh-action@v1.0.0
              with:
                  host: ${{ secrets.DEV_SERVER_HOST }}
                  username: ${{ secrets.DEV_SERVER_USERNAME }}
                  key: ${{ secrets.DEV_SERVER_KEY }}
                  port: ${{ secrets.DEV_SERVER_PORT }}
                  script_stop: true
                  script: |
                      rm -f ./deploy_frontend.sh

                      # 환경 변수 설정 시작
                      NEXT_PUBLIC_API_MOCKING=${{ vars.NEXT_PUBLIC_API_MOCKING }}
                      SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}

                      # 스크립트 생성 시작
                      SCRIPT="$(eval echo ~$USER)/deploy_frontend.sh"
                      touch $SCRIPT

                      # nvm PATH 설정
                      echo "export NVM_DIR=~/.nvm" >> $SCRIPT
                      echo "source ~/.nvm/nvm.sh" >> $SCRIPT

                      echo "cd $(eval echo ~$USER)" >> $SCRIPT

                      # 최초 여부에 따라 분기
                      # 폴더가 없으면 clone 해야 하고, 있으면 pull 해야 함
                      echo "DIR=\"$(eval echo ~$USER)/${{ github.event.repository.name }}\"" >> $SCRIPT
                      echo 'if [ -d "$DIR" ]; then' >> $SCRIPT

                        echo "echo Already Cloned." >> $SCRIPT

                        echo 'cd $DIR' >> $SCRIPT

                        # nohup으로 실행한 프로세스를 종료하기
                        # true를 반환해 shell이 종료되지 않음. 이 옵션은 /bin/sh -e 옵션을 줘서 테스트할 수 있음
                        echo "kill -15 `cat $DIR/frontend/program.pid` || true" >> $SCRIPT

                        # git fetch -all 과 동일
                        echo "git remote update" >> $SCRIPT

                        # 먼저 기존 branch를 제거함. 제거하기 위해선 다른 branch에 있어야 함.
                        echo "git checkout main" >> $SCRIPT
                        echo "git branch -d ${{ github.head_ref || github.ref_name }} || true" >> $SCRIPT

                        # switch -c, checkout -b, checkout -t 모두 이미 있는 경우 오류가 발생함
                        echo "git checkout -b ${{ github.head_ref || github.ref_name }} origin/${{ github.head_ref || github.ref_name }}" >> $SCRIPT
                        
                        echo "git pull" >> $SCRIPT

                        echo "else" >> $SCRIPT
                        echo "echo Newly Cloning." >> $SCRIPT
                        echo "git clone https://${{ secrets.GIT_CLONE_TOKEN }}@${{ github.server_url }}/${{ github.repository }}.git" >> $SCRIPT
                        echo 'cd $DIR' >> $SCRIPT
                        echo "fi" >> $SCRIPT

                      ## 설치 및 빌드
                      echo "yarn" >> $SCRIPT
                      echo "yarn f run msw init public" >> $SCRIPT
                      echo "yarn f build" >> $SCRIPT

                      # nohup으로 실행해 종료되지 않게
                      # https://stackoverflow.com/a/11856575
                      echo "rm -f server.log" >> $SCRIPT
                      echo 'nohup yarn f start > server.log 2>&1 & echo $! > program.pid' >> $SCRIPT
                      echo "echo server started" >> $SCRIPT

                      chmod 700 $SCRIPT
                      cat $SCRIPT
                      $SCRIPT
